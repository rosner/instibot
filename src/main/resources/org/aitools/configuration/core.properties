#Program D Core Configuration
#===============================================================
#This program is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#as published by the Free Software Foundation; either version 2
#of the License, or (at your option) any later version.
#
#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 
#02111-1307, USA.

#GENERAL NOTES
#
#1. Configuration options are grouped for easy maintenance.
#2. Unless otherwise noted, commenting out a property will
#   cause the engine's default value to be used.
#3. Relative URLs will be (attempted to be) resolved from
#   the parent of this file (i.e., if this file is at
#   file:/ProgramD/conf/core.xml, they will be resolved
#   from file:/ProgramD/conf).
#4. A property may only be defined once.
#5. The notations in [square brackets] are used to generate
#   the Settings class that corresponds with this properties
#   file.  Please do not change these notations unless you
#   know what you are doing.

#	MAIN PROGRAM D CONFIGURATION
    
#The namespace URI of AIML to use. [URI: http://alicebot.org/2001/AIML-1.0.1]
programd.aiml-schema.namespace-uri = http://alicebot.org/2001/AIML-1.0.1
    
#The bot configuration startup file. [URL: bots.xml]
programd.startup-file-path = bots.xml
##programd.startup-file-path = ../resources/testing/multibot/bots.xml
    
#What to do when a category is loaded whose pattern:that:topic path is identical to one already loaded (for the same bot).
#	* skip: Leave the currently loaded template in place and ignore the new one.
#	* overwrite: Overwrite the loaded template with the new one.
#	* append: Append the content of the new template to the currently loaded one.
#	* combine: Store the new template as well, so it will have an equal chance of being used as the currently loaded one.
programd.merge.policy = combine
    
#If the append merge policy is used, what text content (if any) should be inserted between the contents of the two templates?
#	* (The default value you see here is the hex code for a space.)  [String: &#x10;]
programd.merge.append.separator-string = &#x10;

#Produce a note in the console/log for each merge? [boolean: true]
programd.merge.note-each = true
    
#The default value for undefined predicates. [String: undefined]
programd.predicate-empty-default = undefined
    
#The maximum allowable time (in milliseconds) to get a response. [int: 1000]
programd.response-timeout = 1000

#How many categories will be loaded before a message is displayed? [int: 5000]
#	* Only meaningful if programd.enable-console == true.
programd.category-load-notify-interval = 5000
    
#Whether or not to print a message as each file is loaded. [boolean: true]
programd.load.notify-each-file = true

#The input to match if an infinite loop is found. [String: INFINITE LOOP]
programd.infinite-loop-input = INFINITE LOOP
    
#Which bot predicate contains the client's name? [String: name]
programd.client-name-predicate = name
    
#Which bot predicate contains the bot's name? [String: name]
programd.bot-name-predicate = name
        
#Print stack trace on uncaught exceptions? [boolean: false]
programd.on-uncaught-exceptions.print-stack-trace = true
    
#Execute contents of <system> elements? [boolean: false]
programd.os-access-allowed = true
    
#Execute contents of <javascript> elements? [boolean: false]
programd.javascript-allowed = true
    
#Where to write gossip entries.                       [URL: /var/log/programd/gossip.txt]
#	* Gossip entries will be written like this:
#		<li>the gossip</li>.
programd.gossip.path = /Users/jeckyll/Documents/studium/dialogsysteme/gossip.txt
    
#The string to send when first connecting to the bot. [String: CONNECT]
#	* If this value is empty or not defined, no value will be sent.
programd.connect-string = CONNECT

#The string to send after an inactivity timeout. [String: INACTIVITY]
programd.inactivity-string = INACTIVITY
    
#The Nodemapper implementation to use. [String: org.aitools.programd.graph.TwoOptimalNodemaster]
#programd.nodemapper-implementation = org.aitools.programd.graph.TwoOptimalNodemaster
#    #programd.nodemapper-implementation = org.aitools.programd.graph.NonOptimalNodemaster
#    #programd.nodemapper-implementation = org.aitools.programd.graph.OneOptimalNodemaster
#    #programd.nodemapper-implementation = org.aitools.programd.graph.ThreeOptimalNodemaster
    
#The Multiplexor implementation to use. [String: org.aitools.programd.multiplexor.FlatFileMultiplexor]
#programd.multiplexor-implementation = org.aitools.programd.multiplexor.FlatFileMultiplexor
#    #programd.multiplexor-classname = org.aitools.programd.multiplexor.DBMultiplexor
    
#The directory in which to save flat-file predicates (FFM only). [URL: /var/programd/ffm]
programd.multiplexor.ffm-dir = file:/Users/jeckyll/Documents/studium/dialogsysteme/ffm
    
#Enable the heart? [boolean: false]
#	* The heart can beat and let you know the bot is alive.
#	* Right now the only kind of pulse is a message "I'm alive!" printed to the console.
#	* You can write a "Pulse" that can do something more useful, like ping a server.
#programd.heart.enabled = false
    
#The pulse rate for the heart (beats per minute). [int: 5]
#programd.heart.pulserate = 5
    
#The maximum size of the cache before writing to disk/database. [int: 500]
programd.predicate-cache.max = 500
    
#Use interactive command-line shell? [boolean: true]
#programd.console.use-shell = true
    
#Exit immediately upon startup? [boolean: false]
#	* This is for purposes of timing the program; after all bots have been loaded, the program will immediately exit.
#programd.exit-immediately-on-startup = false
    
#	SCHEMA LOCATIONS
    
    #The location of the AIML schema (or a copy of it). [URL: ../resources/schema/AIML.xsd]
    programd.schema-location.AIML = ../programd/AIML.xsd

    #The location of the plugin schema (or a copy of it). [URL: ../resources/schema/plugins.xsd]
    programd.schema-location.plugins = ../programd/plugins.xsd

    #The location of the test cases schema (or a copy of it). [URL: ../resources/schema/test-cases.xsd]
    programd.schema-location.test-cases = ../programd/test-cases.xsd
    
#    INTERPRETER CONFIGURATION
    
    
    #The directory in which to execute <system> commands. [URL: ..]
    programd.system-interpreter.directory = ..
    
    #The string to prepend to all <system> calls (platform-specific). [String: ]
#         * Windows requires something like "cmd /c "; Linux doesn't (just comment out)
#    programd.system-interpreter.prefix = 
    
    #The JavaScript interpreter (fully-qualified class name). [String: org.aitools.programd.interpreter.RhinoInterpreter]
#    programd.javascript-interpreter.classname = org.aitools.programd.interpreter.RhinoInterpreter
    
    
#    AIMLWATCHER CONFIGURATION
    
#Enable the AIML Watcher? [boolean: true]
#	   * This will automatically load your AIML files if they are changed.
#    programd.use-watcher = true

#The delay period when checking changed AIML (milliseconds). [int: 2000]
#        * Only applicable if the AIML Watcher is enabled.
#    programd.watcher.timer = 2000
                   
#    OTHER CONFIGURATION FILE LOCATIONS
    
#Configuration file for plugins. [URL: plugins.xml]
programd.conf-location.plugins = plugins.xml